=begin
#Shotstack

#The Shotstack API is a video editing service that allows for the automated creation of videos using JSON. You can configure an edit and POST it to the Shotstack API which will render your video and provide a file location when complete. For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation.

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module Shotstack
  class EndpointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Render Status
    # Get the rendering status, video url and details of a timeline by ID.
    # @param id [String] The id of the timeline render task in UUID format
    # @param [Hash] opts the optional parameters
    # @return [RenderResponse]
    def get_render(id, opts = {})
      data, _status_code, _headers = get_render_with_http_info(id, opts)
      data
    end

    # Get Render Status
    # Get the rendering status, video url and details of a timeline by ID.
    # @param id [String] The id of the timeline render task in UUID format
    # @param [Hash] opts the optional parameters
    # @return [Array<(RenderResponse, Integer, Hash)>] RenderResponse data, response status code and response headers
    def get_render_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.get_render ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EndpointsApi.get_render"
      end
      pattern = Regexp.new(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling EndpointsApi.get_render, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/render/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RenderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['DeveloperKey']

      new_options = opts.merge(
        :operation => :"EndpointsApi.get_render",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#get_render\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Render Video
    # Queue and render the contents of a timeline as a video file.
    # @param edit [Edit] The video edit specified using JSON.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_api_queue_id The id of a dedicated queue (enterprise customers only).
    # @return [QueuedResponse]
    def post_render(edit, opts = {})
      data, _status_code, _headers = post_render_with_http_info(edit, opts)
      data
    end

    # Render Video
    # Queue and render the contents of a timeline as a video file.
    # @param edit [Edit] The video edit specified using JSON.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_api_queue_id The id of a dedicated queue (enterprise customers only).
    # @return [Array<(QueuedResponse, Integer, Hash)>] QueuedResponse data, response status code and response headers
    def post_render_with_http_info(edit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.post_render ...'
      end
      # verify the required parameter 'edit' is set
      if @api_client.config.client_side_validation && edit.nil?
        fail ArgumentError, "Missing the required parameter 'edit' when calling EndpointsApi.post_render"
      end
      # resource path
      local_var_path = '/render'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x-api-queue-id'] = opts[:'x_api_queue_id'] if !opts[:'x_api_queue_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(edit)

      # return_type
      return_type = opts[:debug_return_type] || 'QueuedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['DeveloperKey']

      new_options = opts.merge(
        :operation => :"EndpointsApi.post_render",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#post_render\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
