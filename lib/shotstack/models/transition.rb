=begin
#Shotstack

#Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module Shotstack
  # In and out transitions for a clip - i.e. fade in and fade out
  class Transition
    # The transition in. Available transitions are:   <ul>     <li>`fade` - fade in</li>     <li>`reveal` - reveal from left to right</li>     <li>`wipeLeft` - fade across screen to the left</li>     <li>`wipeRight` - fade across screen to the right</li>     <li>`slideLeft` - move slightly left and fade in</li>     <li>`slideRight` - move slightly right and fade in</li>     <li>`slideUp` - move slightly up and fade in</li>     <li>`slideDown` - move slightly down and fade in</li>     <li>`carouselLeft` - slide in from right to left</li>     <li>`carouselRight` - slide in from left to right</li>     <li>`carouselUp` - slide in from bottom to top</li>     <li>`carouselDown` - slide in from top to bottom</li>     <li>`shuffleTopRight` - rotate in from top right</li>     <li>`shuffleRightTop` - rotate in from right top</li>     <li>`shuffleRightBottom` - rotate in from right bottom</li>     <li>`shuffleBottomRight` - rotate in from bottom right</li>     <li>`shuffleBottomLeft` - rotate in from bottom left</li>     <li>`shuffleLeftBottom` - rotate in from left bottom</li>     <li>`shuffleLeftTop` - rotate in from left top</li>     <li>`shuffleTopLeft` - rotate in from top left</li>     <li>`zoom` - fast zoom in</li>   </ul> The transition speed can also be controlled by appending `Fast` or `Slow` to the transition, e.g. `fadeFast` or `CarouselLeftSlow`.
    attr_accessor :_in

    # The transition out. Available transitions are:   <ul>     <li>`fade` - fade out</li>     <li>`reveal` - reveal from right to left</li>     <li>`wipeLeft` - fade across screen to the left</li>     <li>`wipeRight` - fade across screen to the right</li>     <li>`slideLeft` - move slightly left and fade out</li>     <li>`slideRight` - move slightly right and fade out</li>     <li>`slideUp` - move slightly up and fade out</li>     <li>`slideDown` - move slightly down and fade out</li>     <li>`carouselLeft` - slide out from right to left</li>     <li>`carouselRight` - slide out from left to right</li>     <li>`carouselUp` - slide out from bottom to top</li>     <li>`carouselDown` - slide out from top  to bottom</li>     <li>`shuffleTopRight` - rotate out from top right</li>     <li>`shuffleRightTop` - rotate out from right top</li>     <li>`shuffleRightBottom` - rotate out from right bottom</li>     <li>`shuffleBottomRight` - rotate out from bottom right</li>     <li>`shuffleBottomLeft` - rotate out from bottom left</li>     <li>`shuffleLeftBottom` - rotate out from left bottom</li>     <li>`shuffleLeftTop` - rotate out from left top</li>     <li>`shuffleTopLeft` - rotate out from top left</li>     <li>`zoom` - fast zoom out</li>   </ul> The transition speed can also be controlled by appending `Fast` or `Slow` to the transition, e.g. `fadeFast` or `CarouselLeftSlow`.
    attr_accessor :out

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_in' => :'in',
        :'out' => :'out'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_in' => :'String',
        :'out' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shotstack::Transition` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shotstack::Transition`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_in')
        self._in = attributes[:'_in']
      end

      if attributes.key?(:'out')
        self.out = attributes[:'out']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      _in_validator = EnumAttributeValidator.new('String', ["fade", "fadeSlow", "fadeFast", "reveal", "revealSlow", "revealFast", "wipeLeft", "wipeLeftSlow", "wipeLeftFast", "wipeRight", "wipeRightSlow", "wipeRightFast", "slideLeft", "slideLeftSlow", "slideLeftFast", "slideRight", "slideRightSlow", "slideRightFast", "slideUp", "slideUpSlow", "slideUpFast", "slideDown", "slideDownSlow", "slideDownFast", "carouselLeft", "carouselLeftSlow", "carouselLeftFast", "carouselRight", "carouselRightSlow", "carouselRightFast", "carouselUp", "carouselUpSlow", "carouselUpFast", "carouselDown", "carouselDownSlow", "carouselDownFast", "shuffleTopRight", "shuffleTopRightSlow", "shuffleTopRightFast", "shuffleRightTop", "shuffleRightTopSlow", "shuffleRightTopFast", "shuffleRightBottom", "shuffleRightBottomSlow", "shuffleRightBottomFast", "shuffleBottomRight", "shuffleBottomRightSlow", "shuffleBottomRightFast", "shuffleBottomLeft", "shuffleBottomLeftSlow", "shuffleBottomLeftFast", "shuffleLeftBottom", "shuffleLeftBottomSlow", "shuffleLeftBottomFast", "shuffleLeftTop", "shuffleLeftTopSlow", "shuffleLeftTopFast", "shuffleTopLeft", "shuffleTopLeftSlow", "shuffleTopLeftFast", "zoom"])
      return false unless _in_validator.valid?(@_in)
      out_validator = EnumAttributeValidator.new('String', ["fade", "fadeSlow", "fadeFast", "reveal", "revealSlow", "revealFast", "wipeLeft", "wipeLeftSlow", "wipeLeftFast", "wipeRight", "wipeRightSlow", "wipeRightFast", "slideLeft", "slideLeftSlow", "slideLeftFast", "slideRight", "slideRightSlow", "slideRightFast", "slideUp", "slideUpSlow", "slideUpFast", "slideDown", "slideDownSlow", "slideDownFast", "carouselLeft", "carouselLeftSlow", "carouselLeftFast", "carouselRight", "carouselRightSlow", "carouselRightFast", "carouselUp", "carouselUpSlow", "carouselUpFast", "carouselDown", "carouselDownSlow", "carouselDownFast", "shuffleTopRight", "shuffleTopRightSlow", "shuffleTopRightFast", "shuffleRightTop", "shuffleRightTopSlow", "shuffleRightTopFast", "shuffleRightBottom", "shuffleRightBottomSlow", "shuffleRightBottomFast", "shuffleBottomRight", "shuffleBottomRightSlow", "shuffleBottomRightFast", "shuffleBottomLeft", "shuffleBottomLeftSlow", "shuffleBottomLeftFast", "shuffleLeftBottom", "shuffleLeftBottomSlow", "shuffleLeftBottomFast", "shuffleLeftTop", "shuffleLeftTopSlow", "shuffleLeftTopFast", "shuffleTopLeft", "shuffleTopLeftSlow", "shuffleTopLeftFast", "zoom"])
      return false unless out_validator.valid?(@out)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _in Object to be assigned
    def _in=(_in)
      validator = EnumAttributeValidator.new('String', ["fade", "fadeSlow", "fadeFast", "reveal", "revealSlow", "revealFast", "wipeLeft", "wipeLeftSlow", "wipeLeftFast", "wipeRight", "wipeRightSlow", "wipeRightFast", "slideLeft", "slideLeftSlow", "slideLeftFast", "slideRight", "slideRightSlow", "slideRightFast", "slideUp", "slideUpSlow", "slideUpFast", "slideDown", "slideDownSlow", "slideDownFast", "carouselLeft", "carouselLeftSlow", "carouselLeftFast", "carouselRight", "carouselRightSlow", "carouselRightFast", "carouselUp", "carouselUpSlow", "carouselUpFast", "carouselDown", "carouselDownSlow", "carouselDownFast", "shuffleTopRight", "shuffleTopRightSlow", "shuffleTopRightFast", "shuffleRightTop", "shuffleRightTopSlow", "shuffleRightTopFast", "shuffleRightBottom", "shuffleRightBottomSlow", "shuffleRightBottomFast", "shuffleBottomRight", "shuffleBottomRightSlow", "shuffleBottomRightFast", "shuffleBottomLeft", "shuffleBottomLeftSlow", "shuffleBottomLeftFast", "shuffleLeftBottom", "shuffleLeftBottomSlow", "shuffleLeftBottomFast", "shuffleLeftTop", "shuffleLeftTopSlow", "shuffleLeftTopFast", "shuffleTopLeft", "shuffleTopLeftSlow", "shuffleTopLeftFast", "zoom"])
      unless validator.valid?(_in)
        fail ArgumentError, "invalid value for \"_in\", must be one of #{validator.allowable_values}."
      end
      @_in = _in
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] out Object to be assigned
    def out=(out)
      validator = EnumAttributeValidator.new('String', ["fade", "fadeSlow", "fadeFast", "reveal", "revealSlow", "revealFast", "wipeLeft", "wipeLeftSlow", "wipeLeftFast", "wipeRight", "wipeRightSlow", "wipeRightFast", "slideLeft", "slideLeftSlow", "slideLeftFast", "slideRight", "slideRightSlow", "slideRightFast", "slideUp", "slideUpSlow", "slideUpFast", "slideDown", "slideDownSlow", "slideDownFast", "carouselLeft", "carouselLeftSlow", "carouselLeftFast", "carouselRight", "carouselRightSlow", "carouselRightFast", "carouselUp", "carouselUpSlow", "carouselUpFast", "carouselDown", "carouselDownSlow", "carouselDownFast", "shuffleTopRight", "shuffleTopRightSlow", "shuffleTopRightFast", "shuffleRightTop", "shuffleRightTopSlow", "shuffleRightTopFast", "shuffleRightBottom", "shuffleRightBottomSlow", "shuffleRightBottomFast", "shuffleBottomRight", "shuffleBottomRightSlow", "shuffleBottomRightFast", "shuffleBottomLeft", "shuffleBottomLeftSlow", "shuffleBottomLeftFast", "shuffleLeftBottom", "shuffleLeftBottomSlow", "shuffleLeftBottomFast", "shuffleLeftTop", "shuffleLeftTopSlow", "shuffleLeftTopFast", "shuffleTopLeft", "shuffleTopLeftSlow", "shuffleTopLeftFast", "zoom"])
      unless validator.valid?(out)
        fail ArgumentError, "invalid value for \"out\", must be one of #{validator.allowable_values}."
      end
      @out = out
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _in == o._in &&
          out == o.out
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_in, out].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shotstack.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
