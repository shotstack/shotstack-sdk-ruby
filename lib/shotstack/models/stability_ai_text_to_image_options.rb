=begin
#Shotstack

# Official Ruby SDK for the Shotstack Cloud Video Editing API

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module Shotstack
  # Options for the Stability AI text-to-image service. Set a text prompt to generate an image from plus other engine and configuration options. The output will be generated as a JPG file available at the URL returned in the response.
  class StabilityAiTextToImageOptions
    # The type of asset to generate - set to `text-to-image` for text-to-image.
    attr_accessor :type

    # The text prompt to generate an image from.
    attr_accessor :prompt

    # The engine (model) to use for generating the image. Select from the list of available engines: <ul>   <li>`stable-diffusion-xl-1024-v0-9`</li>   <li>`stable-diffusion-xl-1024-v1-0`</li>   <li>`stable-diffusion-v1-6`</li>   <li>`stable-diffusion-512-v2-1`</li>   <li>`stable-diffusion-xl-beta-v2-2-2`</li> </ul>
    attr_accessor :engine

    # The width of the image in pixels. Must be divisible by 64.
    attr_accessor :width

    # The height of the image in pixels. Must be divisible by 64.
    attr_accessor :height

    # The number of iterative diffusion steps to run. A number between 10 and 50.
    attr_accessor :steps

    # Using the same seed can help you create images that look similar. Set to 0 for a random seed. A number between 0 and 4294967295.
    attr_accessor :seed

    # Determines how closely the generated image will match the prompt. Lower numbers allow for more creative freedom. A number between 0 and 35.
    attr_accessor :cfg_scale

    # Apply a preset to generate an image in a particular style. Select from the list of available presets: <ul>   <li>`3d-model`</li>   <li>`analog-film`</li>   <li>`anime`</li>   <li>`cinematic`</li>   <li>`comic-book`</li>   <li>`digital-art`</li>   <li>`enhance`</li>   <li>`fantasy-art`</li>   <li>`isometric`</li>   <li>`line-art`</li>   <li>`low-poly`</li>   <li>`modeling-compound`</li>   <li>`neon-punk`</li>   <li>`origami`</li>   <li>`photographic`</li>   <li>`pixel-art`</li>   <li>`tile-texture`</li> </ul>
    attr_accessor :style_preset

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'prompt' => :'prompt',
        :'engine' => :'engine',
        :'width' => :'width',
        :'height' => :'height',
        :'steps' => :'steps',
        :'seed' => :'seed',
        :'cfg_scale' => :'cfgScale',
        :'style_preset' => :'stylePreset'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'String',
        :'prompt' => :'String',
        :'engine' => :'String',
        :'width' => :'Integer',
        :'height' => :'Integer',
        :'steps' => :'Integer',
        :'seed' => :'Integer',
        :'cfg_scale' => :'Float',
        :'style_preset' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shotstack::StabilityAiTextToImageOptions` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shotstack::StabilityAiTextToImageOptions`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = 'text-to-image'
      end

      if attributes.key?(:'prompt')
        self.prompt = attributes[:'prompt']
      else
        self.prompt = nil
      end

      if attributes.key?(:'engine')
        self.engine = attributes[:'engine']
      else
        self.engine = 'stable-diffusion-xl-1024-v1-0'
      end

      if attributes.key?(:'width')
        self.width = attributes[:'width']
      else
        self.width = nil
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      else
        self.height = nil
      end

      if attributes.key?(:'steps')
        self.steps = attributes[:'steps']
      else
        self.steps = 30
      end

      if attributes.key?(:'seed')
        self.seed = attributes[:'seed']
      else
        self.seed = 0
      end

      if attributes.key?(:'cfg_scale')
        self.cfg_scale = attributes[:'cfg_scale']
      else
        self.cfg_scale = 7
      end

      if attributes.key?(:'style_preset')
        self.style_preset = attributes[:'style_preset']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @prompt.nil?
        invalid_properties.push('invalid value for "prompt", prompt cannot be nil.')
      end

      if @width.nil?
        invalid_properties.push('invalid value for "width", width cannot be nil.')
      end

      if @height.nil?
        invalid_properties.push('invalid value for "height", height cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["text-to-image"])
      return false unless type_validator.valid?(@type)
      return false if @prompt.nil?
      engine_validator = EnumAttributeValidator.new('String', ["stable-diffusion-xl-1024-v0-9", "stable-diffusion-xl-1024-v1-0", "stable-diffusion-v1-6", "stable-diffusion-512-v2-1", "stable-diffusion-xl-beta-v2-2-2"])
      return false unless engine_validator.valid?(@engine)
      return false if @width.nil?
      return false if @height.nil?
      style_preset_validator = EnumAttributeValidator.new('String', ["3d-model", "analog-film", "anime", "cinematic", "comic-book", "digital-art", "enhance", "fantasy-art", "isometric", "line-art", "low-poly", "modeling-compound", "neon-punk", "origami", "photographic", "pixel-art", "tile-texture"])
      return false unless style_preset_validator.valid?(@style_preset)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["text-to-image"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] engine Object to be assigned
    def engine=(engine)
      validator = EnumAttributeValidator.new('String', ["stable-diffusion-xl-1024-v0-9", "stable-diffusion-xl-1024-v1-0", "stable-diffusion-v1-6", "stable-diffusion-512-v2-1", "stable-diffusion-xl-beta-v2-2-2"])
      unless validator.valid?(engine)
        fail ArgumentError, "invalid value for \"engine\", must be one of #{validator.allowable_values}."
      end
      @engine = engine
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] style_preset Object to be assigned
    def style_preset=(style_preset)
      validator = EnumAttributeValidator.new('String', ["3d-model", "analog-film", "anime", "cinematic", "comic-book", "digital-art", "enhance", "fantasy-art", "isometric", "line-art", "low-poly", "modeling-compound", "neon-punk", "origami", "photographic", "pixel-art", "tile-texture"])
      unless validator.valid?(style_preset)
        fail ArgumentError, "invalid value for \"style_preset\", must be one of #{validator.allowable_values}."
      end
      @style_preset = style_preset
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          prompt == o.prompt &&
          engine == o.engine &&
          width == o.width &&
          height == o.height &&
          steps == o.steps &&
          seed == o.seed &&
          cfg_scale == o.cfg_scale &&
          style_preset == o.style_preset
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, prompt, engine, width, height, steps, seed, cfg_scale, style_preset].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shotstack.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
