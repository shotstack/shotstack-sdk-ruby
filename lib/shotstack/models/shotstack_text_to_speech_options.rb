=begin
#Shotstack

# Official Ruby SDK for the Shotstack Cloud Video Editing API

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module Shotstack
  # Options for the Shotstack text-to-speech service. Set the text to be converted to speech and choose a voice to set the speaking style. The output will be generated as an MP3 audio file available at the URL returned in the response.
  class ShotstackTextToSpeechOptions
    # The type of asset to generate - set to `text-to-speech` for text-to-speech.
    attr_accessor :type

    # The text to convert to speech.
    attr_accessor :text

    # The voice to use for the text-to-speech conversion. You must pair the correct voice with the correct language. For each language there is a language code that must be set in the `language` property. The voice must be available for the language code or the conversion will fail. i.e. To use the voice `Zeina` for Arabic you must set the `language` to `arb`. Select a voice from the list of available voices, the language code is in brackets: <ul>   <li>Arabic - Gulf (ar-AE)</li>   <ul>     <li>`Hala`</li>   </ul>   <li>Dutch - Belgian (nl-BE)</li>   <ul>     <li>`Lisa`</li>   </ul>   <li>Catalan (ca-ES)</li>   <ul>     <li>`Arlet`</li>   </ul>   <li>Chinese - Cantonese (yue-CN)</li>   <ul>     <li>`Hiujin`</li>   </ul>   <li>Chinese - Mandarin (cmn-CN)</li>   <ul>     <li>`Zhiyu`</li>   </ul>   <li>Danish (da-DK)</li>   <ul>     <li>`Sofie`</li>   </ul>   <li>Dutch (nl-NL)</li>   <ul>     <li>`Laura`</li>   </ul>   <li>English - Australian (en-AU)</li>   <ul>     <li>`Olivia`</li>   </ul>   <li>English - British (en-GB)</li>   <ul>     <li>`Amy`</li>     <li>`Emma`</li>     <li>`Brian`</li>     <li>`Arthur`</li>   </ul>   <li>English - Indian (en-IN)</li>   <ul>     <li>`Kajal`</li>   </ul>   <li>English - Ireland (en-IE)</li>   <ul>     <li>`Niamh`</li>   </ul>   <li>English - New Zealand (en-NZ)</li>   <ul>     <li>`Aria`</li>   </ul>   <li>English - South African (en-ZA)</li>   <ul>     <li>`Ayanda`</li>   </ul>   <li>English - US (en-US)</li>   <ul>     <li>`Ivy`</li>     <li>`Joanna`</li>     <li>`Kendra`</li>     <li>`Kimberly`</li>     <li>`Salli`</li>     <li>`Joey`</li>     <li>`Justin`</li>     <li>`Kevin`</li>     <li>`Matthew`</li>     <li>`Ruth`</li>     <li>`Stephen`</li>   </ul>   <li>Finnish (fi-FI)</li>   <ul>     <li>`Suvi`</li>   </ul>   <li>French (fr-FR)</li>   <ul>     <li>`Léa`</li>     <li>`Rémi`</li>   </ul>   <li>French - Canadian (fr-CA)</li>   <ul>     <li>`Gabrielle`</li>     <li>`Liam`</li>   </ul>   <li>German (de-DE)</li>   <ul>     <li>`Vicki`</li>     <li>`Daniel`</li>   </ul>   <li>German - Austrian (de-AT)</li>   <ul>     <li>`Hannah`</li>   </ul>   <li>Hindi (hi-IN)</li>   <ul>     <li>`Kajal`</li>   </ul>   <li>Italian (it-IT)</li>   <ul>     <li>`Bianca`</li>     <li>`Adriano`</li>   </ul>   <li>Japanese (ja-JP)</li>   <ul>     <li>`Takumi`</li>     <li>`Kazuha`</li>     <li>`Tomoko`</li>   </ul>   <li>Korean (ko-KR)</li>   <ul>     <li>`Seoyeon`</li>   </ul>   <li>Norwegian (nb-NO)</li>   <ul>     <li>`Ida`</li>   </ul>   <li>Polish (pl-PL)</li>   <ul>     <li>`Ola`</li>   </ul>   <li>Portuguese - Brazilian (pt-BR)</li>   <ul>     <li>`Camila`</li>     <li>`Vitória` or `Vitoria`</li>     <li>`Thiago`</li>   </ul>   <li>Portuguese - European (pt-PT)</li>   <ul>     <li>`Inês` or `Ines`</li>   </ul>   <li>Spanish (es-ES)</li>   <ul>     <li>`Lucia`</li>     <li>`Sergio`</li>   </ul>   <li>Spanish - Mexican (es-MX)</li>   <ul>     <li>`Mia`</li>     <li>`Andrés`</li>   </ul>   <li>Spanish - US (es-US)</li>   <ul>     <li>`Lupe`</li>     <li>`Pedro`</li>   </ul>   <li>Swedish (sv-SE)</li>   <ul>     <li>`Elin`</li>   </ul> </ul>
    attr_accessor :voice

    # The language code for the text-to-speech conversion. You must pair the correct language with the correct voice (see voice parameter above). Select a language from the list of available languages: <ul>   <li>`cmn-CN`</li>   <li>`da-DK`</li>   <li>`de-DE`</li>   <li>`en-AU`</li>   <li>`en-GB`</li>   <li>`en-IN`</li>   <li>`en-US`</li>   <li>`es-ES`</li>   <li>`es-MX`</li>   <li>`es-US`</li>   <li>`fr-CA`</li>   <li>`fr-FR`</li>   <li>`it-IT`</li>   <li>`ja-JP`</li>   <li>`hi-IN`</li>   <li>`ko-KR`</li>   <li>`nb-NO`</li>   <li>`nl-NL`</li>   <li>`pl-PL`</li>   <li>`pt-BR`</li>   <li>`pt-PT`</li>   <li>`sv-SE`</li>   <li>`en-NZ`</li>   <li>`en-ZA`</li>   <li>`ca-ES`</li>   <li>`de-AT`</li>   <li>`yue-CN`</li>   <li>`ar-AE`</li>   <li>`fi-FI`</li> </ul>
    attr_accessor :language

    # Set the voice to newscaster mode.<br /><br /> *Only Matthew and Joanna for US English (en-US), Lupe for US Spanish (es-US), and Amy for British English (en-GB) are available in the newscaster voice.
    attr_accessor :newscaster

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'text' => :'text',
        :'voice' => :'voice',
        :'language' => :'language',
        :'newscaster' => :'newscaster'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'String',
        :'text' => :'String',
        :'voice' => :'String',
        :'language' => :'String',
        :'newscaster' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shotstack::ShotstackTextToSpeechOptions` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shotstack::ShotstackTextToSpeechOptions`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = 'text-to-speech'
      end

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      else
        self.text = nil
      end

      if attributes.key?(:'voice')
        self.voice = attributes[:'voice']
      else
        self.voice = nil
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      else
        self.language = 'en-US'
      end

      if attributes.key?(:'newscaster')
        self.newscaster = attributes[:'newscaster']
      else
        self.newscaster = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @text.nil?
        invalid_properties.push('invalid value for "text", text cannot be nil.')
      end

      if @voice.nil?
        invalid_properties.push('invalid value for "voice", voice cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["text-to-speech"])
      return false unless type_validator.valid?(@type)
      return false if @text.nil?
      return false if @voice.nil?
      voice_validator = EnumAttributeValidator.new('String', ["Hala", "Lisa", "Arlet", "Hiujin", "Zhiyu", "Sofie", "Laura", "Olivia", "Amy", "Emma", "Brian", "Arthur", "Kajal", "Niamh", "Aria", "Ayanda", "Ivy", "Joanna", "Kendra", "Kimberly", "Salli", "Joey", "Justin", "Kevin", "Matthew", "Ruth", "Stephen", "Suvi", "Léa", "Rémi", "Gabrielle", "Liam", "Vicki", "Daniel", "Hannah", "Kajal", "Bianca", "Adriano", "Takumi", "Kazuha", "Tomoko", "Seoyeon", "Ida", "Ola", "Camila", "Vitória", "Vitoria", "Thiago", "Inês", "Ines", "Lucia", "Sergio", "Mia", "Andrés", "Lupe", "Pedro", "Elin"])
      return false unless voice_validator.valid?(@voice)
      language_validator = EnumAttributeValidator.new('String', ["cmn-CN", "da-DK", "de-DE", "en-AU", "en-GB", "en-IN", "en-US", "es-ES", "es-MX", "es-US", "fr-CA", "fr-FR", "it-IT", "ja-JP", "hi-IN", "ko-KR", "nb-NO", "nl-NL", "pl-PL", "pt-BR", "pt-PT", "sv-SE", "en-NZ", "en-ZA", "ca-ES", "de-AT", "yue-CN", "ar-AE", "fi-FI"])
      return false unless language_validator.valid?(@language)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["text-to-speech"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] voice Object to be assigned
    def voice=(voice)
      validator = EnumAttributeValidator.new('String', ["Hala", "Lisa", "Arlet", "Hiujin", "Zhiyu", "Sofie", "Laura", "Olivia", "Amy", "Emma", "Brian", "Arthur", "Kajal", "Niamh", "Aria", "Ayanda", "Ivy", "Joanna", "Kendra", "Kimberly", "Salli", "Joey", "Justin", "Kevin", "Matthew", "Ruth", "Stephen", "Suvi", "Léa", "Rémi", "Gabrielle", "Liam", "Vicki", "Daniel", "Hannah", "Kajal", "Bianca", "Adriano", "Takumi", "Kazuha", "Tomoko", "Seoyeon", "Ida", "Ola", "Camila", "Vitória", "Vitoria", "Thiago", "Inês", "Ines", "Lucia", "Sergio", "Mia", "Andrés", "Lupe", "Pedro", "Elin"])
      unless validator.valid?(voice)
        fail ArgumentError, "invalid value for \"voice\", must be one of #{validator.allowable_values}."
      end
      @voice = voice
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] language Object to be assigned
    def language=(language)
      validator = EnumAttributeValidator.new('String', ["cmn-CN", "da-DK", "de-DE", "en-AU", "en-GB", "en-IN", "en-US", "es-ES", "es-MX", "es-US", "fr-CA", "fr-FR", "it-IT", "ja-JP", "hi-IN", "ko-KR", "nb-NO", "nl-NL", "pl-PL", "pt-BR", "pt-PT", "sv-SE", "en-NZ", "en-ZA", "ca-ES", "de-AT", "yue-CN", "ar-AE", "fi-FI"])
      unless validator.valid?(language)
        fail ArgumentError, "invalid value for \"language\", must be one of #{validator.allowable_values}."
      end
      @language = language
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          text == o.text &&
          voice == o.voice &&
          language == o.language &&
          newscaster == o.newscaster
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, text, voice, language, newscaster].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shotstack.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
